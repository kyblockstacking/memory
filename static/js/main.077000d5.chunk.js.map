{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","pictureArray","pictures","score","lose","console","log","newArr","_this","i","length","clicked","x","shuffle","setState","array","kevin","emptyKevin","a","Math","floor","random","push","splice","next","res","regScore","hiScore","highscore","y","scoreTracker","style","dogs","cursor","maxHeight","maxWidth","display","map","item","react_default","createElement","key","id","alt","src","url","onClick","className","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8KAgHeA,6MA3GbC,MAAQ,CACNC,aAAcC,EACdC,MAAO,KAGTC,KAAO,WACLC,QAAQC,IAAI,YAIZ,IAFA,IAAIC,EAASC,EAAKR,MAAMC,aAEfQ,EAAI,EAAGA,EAAIF,EAAOG,OAAQD,IACjCF,EAAOE,GAAGE,SAAU,EAGtB,IAAIC,EAAIJ,EAAKK,QAAQN,GAErBC,EAAKM,SAAS,CACZb,aAAcW,EACdT,MAAO,OAIXU,QAAU,SAACE,GAIT,IAHA,IAAIC,EAAQD,EACRE,EAAa,GAEVD,EAAMN,OAAS,GAAG,CAEvB,IAAIQ,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAMN,OAAS,IACnDO,EAAWK,KAAKN,EAAME,IACtBF,EAAMO,OAAOL,EAAG,GAIlB,OAAOD,KAITO,KAAO,SAACC,GACNpB,QAAQC,IAAI,WAEZ,IAAIoB,EAAWlB,EAAKR,MAAMG,MAAQ,EAC9BwB,EAAUnB,EAAKR,MAAM4B,UAAY,EAEjCpB,EAAKR,MAAMG,MAAQK,EAAKR,MAAM4B,YAChCD,EAAUnB,EAAKR,MAAMG,OAGvBsB,EAAId,SAAU,EAEd,IAAIkB,EAAIrB,EAAKK,QAAQL,EAAKR,MAAMC,cAChCI,QAAQC,IAAIuB,GACZrB,EAAKM,SAAS,CACZX,MAAOuB,EACPE,UAAWD,EACX1B,aAAc4B,OAMlBC,aAAe,SAACL,GAEdA,EAAId,QAAUH,EAAKJ,OAASI,EAAKgB,KAAKC,MAG1CM,MAAQ,CACNC,KAAM,CACJC,OAAQ,UACRC,UAAW,QACXC,SAAU,YAKZC,QAAU,WAaR,OAZW5B,EAAKR,MAAMC,aAAaoC,IAAI,SAACC,GACtC,OACEC,EAAArB,EAAAsB,cAAA,OACEC,IAAKH,EAAKI,GACVC,IAAI,GACJC,IAAKN,EAAKO,IACVC,QAAS,kBAAMtC,EAAKsB,aAAaQ,IACjCP,MAAOvB,EAAKuB,MAAMC,KAClBe,UAAU,6GAShB,OACER,EAAArB,EAAAsB,cAAA,qBACUQ,KAAKhD,MAAMG,MACnBoC,EAAArB,EAAAsB,cAAA,WAEAD,EAAArB,EAAAsB,cAAA,WACAD,EAAArB,EAAAsB,cAAA,2BACAD,EAAArB,EAAAsB,cAAA,WACCQ,KAAKZ,kBAvGIa,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOjB,EAAArB,EAAAsB,cAACiB,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.077000d5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport pictures from \"../src/stuff.json\"\n\nclass App extends Component {\n\n  state = {\n    pictureArray: pictures,\n    score: 0\n  }\n\n  lose = () => {\n    console.log(\"YOU LOSE\");\n\n    let newArr = this.state.pictureArray;\n\n    for (let i = 0; i < newArr.length; i++) {\n      newArr[i].clicked = false;\n    }\n\n    let x = this.shuffle(newArr)\n\n    this.setState({\n      pictureArray: x,\n      score: 0\n    })\n  }\n\n  shuffle = (array) => {\n    let kevin = array;\n    let emptyKevin = [];\n\n    while (kevin.length > 0) {\n\n      let a = Math.floor(Math.random() * (kevin.length - 1))\n      emptyKevin.push(kevin[a])\n      kevin.splice(a, 1)\n\n    }\n\n    return emptyKevin;\n\n  }\n\n  next = (res) => {\n    console.log(\"next...\")\n\n    let regScore = this.state.score + 1\n    let hiScore = this.state.highscore + 1;\n\n    if (this.state.score > this.state.highscore) {\n      hiScore = this.state.score;\n    }\n\n    res.clicked = true\n\n    let y = this.shuffle(this.state.pictureArray)\n    console.log(y);\n    this.setState({\n      score: regScore,\n      highscore: hiScore,\n      pictureArray: y\n    })\n\n  }\n\n  // Tracks the score\n  scoreTracker = (res) => {\n\n    res.clicked ? this.lose() : this.next(res);\n  }\n\nstyle = {\n  dogs: {\n    cursor: \"pointer\",\n    maxHeight: \"200px\",\n    maxWidth: \"200px\"\n  }\n}\n\n  // Display all images to DOM\n  display = () => {\n    let pics = this.state.pictureArray.map((item) => {\n      return (\n        <img\n          key={item.id}\n          alt=\"\"\n          src={item.url}\n          onClick={() => this.scoreTracker(item)}\n          style={this.style.dogs}\n          className=\"rounded border border-primary\"\n        ></img>\n      )\n    })\n    return pics\n  }\n\n  // Show DOM\n  render() {\n    return (\n      <div>\n        score: {this.state.score}\n        <br></br>\n        {/* highscore: {this.state.highscore} */}\n        <br></br>\n        <h3>Doggie Clicky</h3>\n        <br></br>\n        {this.display()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}